{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting Started\n",
    "\n",
    "The Euromod Conector is a Python library providing tools for running simulations and interacting with the tax-benefit microsimulation model [EUROMOD](https://euromod-web.jrc.ec.europa.eu \"https://euromod-web.jrc.ec.europa.eu\"). \n",
    "\n",
    "## Installation\n",
    "The Euromod Connector can be installed from [PyPi](https://test.pypi.org/project/euromod/)  using _pip_:\n",
    "```bash\n",
    "$ pip install euromod\n",
    "```\n",
    "\n",
    "### Requirements\n",
    "The Euromod Connector requires two EUROMOD components: 1) the model (coded policy rules), and 2) the input microdata with the variables that respect the EUROMOD naming conventions.\n",
    "For more information, please, read the sections \"Model\" and \"Input microdata\" on the [Download Euromod](https://euromod-web.jrc.ec.europa.eu/download-euromod \"https://euromod-web.jrc.ec.europa.eu/download-euromod\") web page.\n",
    "\n",
    "## Load the model\n",
    "\n",
    "Import the EUROMOD model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "from euromod import Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create an object of the `core.Model` class by passing  the path to the  EUROMOD project: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Model located in C:\\EUROMOD_RELEASES_I6.0+"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod=Model(r\"C:\\EUROMOD_RELEASES_I6.0+\")\n",
    "mod"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Countries and systems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `Model.countries` attirbute is a container storing the `core.Country` objects which nest the country-specific tax-benefit policies and systems.\n",
    "\n",
    "Displays the EUROMOD default countries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0: AT \n",
       "1: BE \n",
       "2: BG \n",
       "3: CY \n",
       "4: CZ \n",
       "5: DE \n",
       "6: DK \n",
       "7: EE \n",
       "8: EL \n",
       "9: ES \n",
       "10: FI\n",
       "11: FR\n",
       "12: HR\n",
       "13: HU\n",
       "14: IE\n",
       "15: IT\n",
       "16: LT\n",
       "17: LU\n",
       "18: LV\n",
       "19: MT\n",
       "20: NL\n",
       "21: PL\n",
       "22: PT\n",
       "23: RO\n",
       "24: SE\n",
       "25: SI\n",
       "26: SK\n",
       "27: SL"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displaying a specific country model, e.g. Simpleland, using the two-letters country code index:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "Country\n",
       "------------------------------\n",
       "\t datasets: sl_demo_v4\n",
       "\t local_extensions: 0 elements\n",
       "\t name: 'SL'\n",
       "\t policies: 12 elements\n",
       "\t systems: SL_1996"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get the `core.System` object from the country class, e.g. for the system 'SL_1996' of the country Simpleland 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "System\n",
       "------------------------------\n",
       "\t ID: 'F7E5CACE-CECC-4BB6-9841-A936D0975481'\n",
       "\t bestmatch_datasets: sl_demo_v4\n",
       "\t currencyOutput: 'euro'\n",
       "\t currencyParam: 'euro'\n",
       "\t datasets: sl_demo_v4\n",
       "\t headDefInc: 'ils_origy'\n",
       "\t name: 'SL_1996'\n",
       "\t order: '1'\n",
       "\t policies: 12 elements\n",
       "\t private: 'no'\n",
       "\t year: '1996'"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].systems['SL_1996']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All the datasets that are available for a country-system model are collected in the attribute `datasets` as `core.Dataset` objects.\n",
    "\n",
    "Displaying information about a dataset relative to a country, e.g. dataset 'sl_demo_v4' for the country Simpleland, by indexing the attribute `datasets`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "Dataset\n",
       "------------------------------\n",
       "\t ID: 'CBA7E428-F8E4-4CEB-8A5E-9ACE73987DD7'\n",
       "\t coicopVersion: ''\n",
       "\t comment: ''\n",
       "\t currency: 'euro'\n",
       "\t decimalSign: '.'\n",
       "\t name: 'sl_demo_v4'\n",
       "\t private: 'no'\n",
       "\t readXVariables: 'no'\n",
       "\t useCommonDefault: 'no'"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].datasets[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displaying information about a dataset relative to a system, e.g. dataset 'sl_demo_v4' for the system 'SL_1996', by indexing the attribute `datasets`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "DatasetInSystem\n",
       "------------------------------\n",
       "\t ID: 'F7E5CACE-CECC-4BB6-9841-A936D0975481CBA7E428-F8E4-4CEB-8A5E-9ACE73987DD7'\n",
       "\t bestMatch: 'yes'\n",
       "\t coicopVersion: ''\n",
       "\t comment: ''\n",
       "\t currency: 'euro'\n",
       "\t dataID: 'CBA7E428-F8E4-4CEB-8A5E-9ACE73987DD7'\n",
       "\t decimalSign: '.'\n",
       "\t name: 'sl_demo_v4'\n",
       "\t private: 'no'\n",
       "\t readXVariables: 'no'\n",
       "\t sysID: 'F7E5CACE-CECC-4BB6-9841-A936D0975481'\n",
       "\t useCommonDefault: 'no'"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].systems['SL_1996'].datasets[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Policies\n",
    "\n",
    "All the policies that apply in a country-system model are collected in the attribute `policies` as `core.Policy` and `core.PolicyInSystem` objects, respectively for the country and system objects.\n",
    "\n",
    "Displaying all the policies modeled in a country using the attribute `policies`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0: Uprate_sl            |    DEF: UPRATING FACTORS \n",
       "1: ILsDef_sl            |    DEF: STANDARD INCOME CONCEPTS \n",
       "2: ILDef_sl             |    DEF: SPECIFIC INCOME CONCEPTS \n",
       "3: TUDef_sl             |    DEF: ASSESSMENT UNITS \n",
       "4: yem_sl               |    DEF: Minimum Wage \n",
       "5: neg_sl               |    DEF: recode negative self-employment income to zer ... \n",
       "6: sic_sl               |    SIC: Social Insurance Contributions \n",
       "7: bch_sl               |    BEN: Child Benefit \n",
       "8: tin_sl               |    TAX: Income Tax \n",
       "9: bsa_sl               |    BEN: Social Assistance \n",
       "10: output_std_sl       |    DEF: STANDARD OUTPUT INDIVIDUAL LEVEL \n",
       "11: output_std_hh_sl    |    DEF: STANDARD OUTPUT HOUSEHOLD LEVEL "
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].policies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displaying all the policies modeled in a system using the attribute `policies`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0: Uprate_sl             | on        |    DEF: UPRATING FACTORS \n",
       "1: ILsDef_sl             | on        |    DEF: STANDARD INCOME CONCEPTS \n",
       "2: ILDef_sl              | on        |    DEF: SPECIFIC INCOME CONCEPTS \n",
       "3: TUDef_sl              | on        |    DEF: ASSESSMENT UNITS \n",
       "4: yem_sl                | on        |    DEF: Minimum Wage \n",
       "5: neg_sl                | on        |    DEF: recode negative self-employment income to zer ... \n",
       "6: sic_sl                | on        |    SIC: Social Insurance Contributions \n",
       "7: bch_sl                | on        |    BEN: Child Benefit \n",
       "8: tin_sl                | on        |    TAX: Income Tax \n",
       "9: bsa_sl                | on        |    BEN: Social Assistance \n",
       "10: output_std_sl        | on        |    DEF: STANDARD OUTPUT INDIVIDUAL LEVEL \n",
       "11: output_std_hh_sl     | off       |    DEF: STANDARD OUTPUT HOUSEHOLD LEVEL "
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].systems['SL_1996'].policies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displaying the `core.Policy` 'sic_sl' in the country Simpleland 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "Policy\n",
       "------------------------------\n",
       "\t ID: '20901CF5-0A2A-4BA8-A18A-7092CD6A182D'\n",
       "\t comment: 'SIC: Social Insurance Contributions'\n",
       "\t extensions: 0 elements\n",
       "\t functions: SchedCalc, SchedCalc, SchedCalc\n",
       "\t name: 'sic_sl'\n",
       "\t order: '7'\n",
       "\t private: 'no'\n",
       "\t spineOrder: '7'"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].policies[6]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displaying the `core.PolicyInSystem` 'sic_sl' for the system 'SL_1996' in country Simpleland 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "PolicyInSystem\n",
       "------------------------------\n",
       "\t ID: 'F7E5CACE-CECC-4BB6-9841-A936D097548120901CF5-0A2A-4BA8-A18A-7092CD6A182D'\n",
       "\t comment: 'SIC: Social Insurance Contributions'\n",
       "\t extensions: 0 elements\n",
       "\t functions: SchedCalc, SchedCalc, SchedCalc\n",
       "\t name: 'sic_sl'\n",
       "\t order: '7'\n",
       "\t polID: '20901CF5-0A2A-4BA8-A18A-7092CD6A182D'\n",
       "\t private: 'no'\n",
       "\t spineOrder: '7'\n",
       "\t switch: 'on'\n",
       "\t sysID: 'F7E5CACE-CECC-4BB6-9841-A936D0975481'"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].systems['SL_1996'].policies[6]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Functions\n",
    "\n",
    "The attribute `functions` stores all the functions defined in a country-system model as `core.Function` objects and `core.FunctionInSystem` objects, respectively.\n",
    "\n",
    "\n",
    "Displaying the `core.Function` object for the function 'SchedCalc' in the policy 'sic_sl' in country Simpleland 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "Function\n",
       "------------------------------\n",
       "\t ID: '0093C4C1-5B69-492F-B88B-99E880201D08'\n",
       "\t comment: \"employee's contribution\"\n",
       "\t extensions: 0 elements\n",
       "\t name: 'SchedCalc'\n",
       "\t order: '2'\n",
       "\t parameters: base, band_rate, uplim, output_var, TAX_UNIT\n",
       "\t polID: '20901CF5-0A2A-4BA8-A18A-7092CD6A182D'\n",
       "\t spineOrder: '7.2'"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].policies[6].functions[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displaying the `core.FunctionInSystem` object for the function 'SchedCalc' in the policy 'sic_sl' and system 'SL_1996' in country Simpleland 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "FunctionInSystem\n",
       "------------------------------\n",
       "\t ID: 'F7E5CACE-CECC-4BB6-9841-A936D09754810093C4C1-5B69-492F-B88B-99E880201D08'\n",
       "\t comment: \"employee's contribution\"\n",
       "\t extensions: 0 elements\n",
       "\t funID: '0093C4C1-5B69-492F-B88B-99E880201D08'\n",
       "\t name: 'SchedCalc'\n",
       "\t order: '2'\n",
       "\t parameters: base, band_rate, uplim, output_var, TAX_UNIT\n",
       "\t polID: '20901CF5-0A2A-4BA8-A18A-7092CD6A182D'\n",
       "\t spineOrder: '7.2'\n",
       "\t switch: 'on'\n",
       "\t sysID: 'F7E5CACE-CECC-4BB6-9841-A936D0975481'"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].systems['SL_1996'].policies[6].functions[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parameters\n",
    "\n",
    "The attribute `parameters` is a container collecting all the policy-functions parameters of a given country-system model, respectively as `core.Parameter` and `core.ParameterInSystem` objects."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Displaying the `core.Parameter` object for parameter 'uplim' from the function 'SchedCalc' in policy 'sic_sl' for country 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "Parameter\n",
       "------------------------------\n",
       "\t ID: '7BE96A7F-610A-4B58-A9B0-36A387B785A7'\n",
       "\t comment: 'i.e. switched off'\n",
       "\t extensions: 0 elements\n",
       "\t funID: '0093C4C1-5B69-492F-B88B-99E880201D08'\n",
       "\t group: ''\n",
       "\t name: 'uplim'\n",
       "\t order: '3'\n",
       "\t spineOrder: '7.2.3'"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.countries['SL'].policies[6].functions[1].parameters[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displaying the `core.ParameterInSystem` object for parameter 'uplim' from the function 'SchedCalc' in policy 'sic_sl' for system 'SL_1996' and country 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "------------------------------\n",
       "ParameterInSystem\n",
       "------------------------------\n",
       "\t ID: 'F7E5CACE-CECC-4BB6-9841-A936D09754817BE96A7F-610A-4B58-A9B0-36A387B785A7'\n",
       "\t comment: 'i.e. switched off'\n",
       "\t extensions: 0 elements\n",
       "\t funID: '0093C4C1-5B69-492F-B88B-99E880201D08'\n",
       "\t group: ''\n",
       "\t name: 'uplim'\n",
       "\t order: '3'\n",
       "\t parID: '7BE96A7F-610A-4B58-A9B0-36A387B785A7'\n",
       "\t spineOrder: '7.2.3'\n",
       "\t sysID: 'F7E5CACE-CECC-4BB6-9841-A936D0975481'\n",
       "\t value: '999999999.99#m'"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod['SL']['SL_1996'].policies[6].functions[1].parameters[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run simulation\n",
    "The example below shows how to run a simulation on the EUROMOD's Simpleland country model, which is an example of a simple country model provided by default with EUROMOD. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the EUROMOD model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "from euromod import Model\n",
    "mod = Model(\"C:\\EUROMOD_RELEASES_I6.0+\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get the best-match dataset for the system 'SL_1996' in the country Simpleland 'SL':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sl_demo_v4'"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_id = mod.countries['SL'].systems['SL_1996'].bestmatch_datasets[-1].name\n",
    "dataset_id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "Load the Simpleland 'SL' dataset as a `pandas.DataFrame`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "data = pd.read_csv(r\"C:\\EUROMOD_RELEASES_I6.0+\\Input\\sl_demo_v4.txt\",sep=\"\\t\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the simulation of the 'SL' system 'SL_1996' using the dataset 'sl_demo_v4':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulation for system SL_1996 with dataset sl_demo_v4 finished.\n"
     ]
    }
   ],
   "source": [
    "out=mod.countries['SL'].systems['SL_1996'].run(data,'sl_demo_v4')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The simulation run returns a `core.Simulation` class that stores the results as `pandas.DataFrame` objects in the attribute `outputs`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idhh</th>\n",
       "      <th>idperson</th>\n",
       "      <th>idmother</th>\n",
       "      <th>idfather</th>\n",
       "      <th>idpartner</th>\n",
       "      <th>dag</th>\n",
       "      <th>dgn</th>\n",
       "      <th>dec</th>\n",
       "      <th>dwt</th>\n",
       "      <th>dms</th>\n",
       "      <th>...</th>\n",
       "      <th>ils_taxsim</th>\n",
       "      <th>ils_tax</th>\n",
       "      <th>ils_sicee</th>\n",
       "      <th>ils_sicse</th>\n",
       "      <th>ils_sicer</th>\n",
       "      <th>ils_sicot</th>\n",
       "      <th>ils_sicdy</th>\n",
       "      <th>ils_dispy</th>\n",
       "      <th>il_taxabley</th>\n",
       "      <th>il_bsa_base</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>807.018500</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>807.01850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>7.87094</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.74188</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.87094</td>\n",
       "      <td>934.294772</td>\n",
       "      <td>149.54786</td>\n",
       "      <td>149.54786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>201.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>84.31707</td>\n",
       "      <td>84.31707</td>\n",
       "      <td>53.76765</td>\n",
       "      <td>0.0</td>\n",
       "      <td>107.53530</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.76765</td>\n",
       "      <td>1337.268280</td>\n",
       "      <td>1421.58535</td>\n",
       "      <td>1337.26828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1255</th>\n",
       "      <td>500.0</td>\n",
       "      <td>50003.0</td>\n",
       "      <td>50002.0</td>\n",
       "      <td>50001.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>500.0</td>\n",
       "      <td>50004.0</td>\n",
       "      <td>50002.0</td>\n",
       "      <td>50001.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>500.0</td>\n",
       "      <td>50005.0</td>\n",
       "      <td>50002.0</td>\n",
       "      <td>50001.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>500.0</td>\n",
       "      <td>50006.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50007.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>839.845300</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>839.84530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1259</th>\n",
       "      <td>500.0</td>\n",
       "      <td>50007.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50006.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1260 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       idhh  idperson  idmother  idfather  idpartner   dag  dgn  dec   dwt  \\\n",
       "0       1.0     101.0       0.0       0.0      102.0  65.0  1.0  0.0  10.0   \n",
       "1       1.0     102.0       0.0       0.0      101.0  60.0  0.0  0.0  10.0   \n",
       "2       1.0     103.0     102.0     101.0        0.0  30.0  1.0  0.0  10.0   \n",
       "3       1.0     104.0     102.0     101.0        0.0  28.0  1.0  0.0  10.0   \n",
       "4       2.0     201.0       0.0       0.0      202.0  29.0  1.0  0.0  10.0   \n",
       "...     ...       ...       ...       ...        ...   ...  ...  ...   ...   \n",
       "1255  500.0   50003.0   50002.0   50001.0        0.0   5.0  0.0  2.0  10.0   \n",
       "1256  500.0   50004.0   50002.0   50001.0        0.0   3.0  1.0  0.0  10.0   \n",
       "1257  500.0   50005.0   50002.0   50001.0        0.0   1.0  0.0  0.0  10.0   \n",
       "1258  500.0   50006.0       0.0       0.0    50007.0  68.0  1.0  0.0  10.0   \n",
       "1259  500.0   50007.0       0.0       0.0    50006.0  62.0  0.0  0.0  10.0   \n",
       "\n",
       "      dms  ...  ils_taxsim   ils_tax  ils_sicee  ils_sicse  ils_sicer  \\\n",
       "0     2.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "1     2.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "2     1.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "3     1.0  ...     0.00000   0.00000    7.87094        0.0   15.74188   \n",
       "4     2.0  ...    84.31707  84.31707   53.76765        0.0  107.53530   \n",
       "...   ...  ...         ...       ...        ...        ...        ...   \n",
       "1255  1.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "1256  1.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "1257  1.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "1258  2.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "1259  2.0  ...     0.00000   0.00000    0.00000        0.0    0.00000   \n",
       "\n",
       "      ils_sicot  ils_sicdy    ils_dispy  il_taxabley  il_bsa_base  \n",
       "0           0.0    0.00000   807.018500      0.00000    807.01850  \n",
       "1           0.0    0.00000     0.000000      0.00000      0.00000  \n",
       "2           0.0    0.00000     0.000000      0.00000      0.00000  \n",
       "3           0.0    7.87094   934.294772    149.54786    149.54786  \n",
       "4           0.0   53.76765  1337.268280   1421.58535   1337.26828  \n",
       "...         ...        ...          ...          ...          ...  \n",
       "1255        0.0    0.00000     0.000000      0.00000      0.00000  \n",
       "1256        0.0    0.00000     0.000000      0.00000      0.00000  \n",
       "1257        0.0    0.00000     0.000000      0.00000      0.00000  \n",
       "1258        0.0    0.00000   839.845300      0.00000    839.84530  \n",
       "1259        0.0    0.00000     0.000000      0.00000      0.00000  \n",
       "\n",
       "[1260 rows x 43 columns]"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out.outputs[0]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
